<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	default-lazy-init="true" default-autowire="byName" >
	
	<bean class="org.operamasks.faces.spring30.ManagedBeanConfigurer" />
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	 
	<context:annotation-config/>
	<context:component-scan base-package="com.scp.dao" />
	<context:component-scan base-package="com.scp.service"/>
	<context:component-scan base-package="com.scp.activemq" />
	
	<context:component-scan base-package="com.ufms.web" />
	
	  
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.PostgreSQLDialect
				</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- Drop and re-create the database schema on startup -->
			</props>
		</property>
	</bean>

	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"
		scope="singleton">
		<property name="configLocation" value="classpath:sql-map-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="useTransactionAwareDataSource" value="true"></property>
		<property name="mappingLocations" value="classpath:com/scp/**/ibatis-*.xml"><!-- 注意下面的通配符配置方式-->
		</property>
	</bean>
	
	
	<bean id="sqlMapClientMySql" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"
		scope="singleton">
		<property name="configLocation" value="classpath:sql-map-config.xml" />
		<property name="dataSource" ref="dzzDataSource" />
		<property name="useTransactionAwareDataSource" value="true"></property>
		<property name="mappingLocations" value="classpath:com/scp/**/ibatis-*.xml">
		</property>
	</bean>
	
	<!--
	
	<bean id="sqlMapClientMySql" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"
		scope="singleton">
		<property name="configLocation" value="classpath:sql-map-config.xml" />
		<property name="dataSource" ref="cimcMysqlDataSource" />
		<property name="useTransactionAwareDataSource" value="true"></property>
		<property name="mappingLocations" value="classpath:com/scp/**/ibatis-*.xml">
		</property>
	</bean>
	
	
	
	--><bean id="hibTtrMgr"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" /> 
	</bean>
	
	<!--事务模板 -->  
    <bean id="hibTtrTemplate"  
        class="org.springframework.transaction.support.TransactionTemplate">  
        <property name="transactionManager">  
            <ref local="hibTtrMgr" />  
        </property>  
        <!--ISOLATION_DEFAULT 表示由使用的数据库决定  -->  
        <property name="isolationLevelName" value="ISOLATION_DEFAULT"/>  
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>  
        <!-- <property name="timeout" value="30"/> -->  
    </bean>  
    
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref local="hibTtrMgr" /> 
		</property>
	</bean>
	
    <!--<tx:advice id="txAdvice1" transaction-manager="hibTtrMgr">  
        <tx:attributes>  
            <tx:method name="find*" read-only="true" />  
            <tx:method name="get*" read-only="true" />  
            <tx:method name="query*" read-only="true" />  
            <tx:method name="load*" read-only="true" />  
            <tx:method name="find*" read-only="true" propagation="REQUIRED"  
                rollback-for="java.lang.Exception,java.lang.RuntimeException" /> 
            <tx:method name="save*" propagation="REQUIRED"  
                rollback-for="java.lang.Exception,java.lang.RuntimeException" /> 
            <tx:method name="del*" propagation="REQUIRED"  
                rollback-for="java.lang.Exception,java.lang.RuntimeException" /> 
            <tx:method name="add*" propagation="REQUIRED"  
                rollback-for="java.lang.Exception,java.lang.RuntimeException" /> 
            <tx:method name="remove*" propagation="REQUIRED"  
                rollback-for="java.lang.Exception,java.lang.RuntimeException" />
        </tx:attributes>  
    </tx:advice>  
    
    <aop:config proxy-target-class="false">  
        <aop:pointcut id="servicePoint1"  
            expression="(execution (* com.scp.1service.*.*(..)))"/>
            expression="(execution (* com.scp.1service.*.*(..))) or (execution(* org.fireflow.engine.persistence.*.*(..)))"
        <aop:advisor pointcut-ref="servicePoint1" id="txAdvisor1"  
            advice-ref="txAdvice1" />  
    </aop:config>  
	-->
	
	<context:property-placeholder location="classpath:amq.properties,classpath:redis.properties" /> 
	
	<!--
	<import resource="applicationContext-activemq.xml" />
	<import resource="applicationContext-redis.xml" />
	-->
	
	<import resource="applicationContext-ds-druid-cimc.xml" />
	
	<import resource="applicationContext-aop.xml" /> 
	<import resource="applicationContext-rmi.xml"/>
	<!--<import resource="applicationContext-dubbo.xml" />
	-->
	
	<bean id="applicationConf" class="com.scp.base.ApplicationConf" lazy-init="false">
		<property name="debug" value="true" />
		<property name="autoFillLs" value="false" />
		<property name="readOnlyDB" value="false" />
		<property name="isUseDzz" value="false" />
		<property name="isStartActiveMq" value="false" />
	</bean>
	
	<!--<cache:annotation-driven cache-manager="cacheManager" key-generator="customKeyGenerator"/>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
        <property name="cacheManager" ref="ehcache"></property>  
    </bean>  
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache-setting.xml"></property>  
    </bean>  
   
    
    --><!-- 初始化Scheduler 
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" autowire="no" scope="singleton">
        <property name="overwriteExistingJobs" value="true"/>
    </bean>-->
    <!-- 初始化job 
	<bean id="scheduleMgr" class="com.scp.schedule.ext.ScheduleMgr" init-method="init" lazy-init="false" scope="singleton"/>
    -->
</beans>
